name: Test Web

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Paths filter
    runs-on: ubuntu-22.04
    outputs:
      should_run: ${{ steps.filter.outputs.src }}
    steps:
      - uses: actions/checkout@v4

      - uses: AurorNZ/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - '!**/*.md'

  build:
    needs: changes
    if: needs.changes.outputs.should_run == 'true'
    name: Test Node.js ${{ matrix.node_version }} / Rust ${{ matrix.rust_version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust_version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        node_version: ["18", "20"]
        rust_version: [stable] # We most likely don't care about Rust versions here, we'll catch those issues in test_rust.yml.
        os: [ubuntu-22.04, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust_version }}
          targets: wasm32-unknown-unknown

      - name: Cache Cargo output
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "web"
          save-if: ${{ github.ref == 'refs/heads/master' }}

      # wasm-bindgen-cli version must match wasm-bindgen crate version.
      # Be sure to update in release_nightly.yml, web/Cargo.toml and web/README.md.
      - name: Install wasm-bindgen
        run: cargo install wasm-bindgen-cli --version 0.2.87

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: binaryen

      # conda is available only with "shell: bash -l {0}".
      # See https://github.com/marketplace/actions/setup-miniconda.
      - name: Install binaryen
        shell: bash -l {0}
        run: conda install -c conda-forge binaryen

      - name: Build
        env:
          RUSTFLAGS: -D warnings
          # Verify that all features build.
          CARGO_FLAGS: --locked --all-features
        working-directory: web
        shell: bash -l {0}
        run: |
          npm ci
          npm run build

      - name: Check formatting
        working-directory: web
        run: npm run lint

      - name: Run tests
        # MIKE: Don't run web tests on Windows because it's flaky for unknown reasons. :-(
        if: runner.os == 'Linux'
        working-directory: web
        run: npm test

  check-required:
    needs: changes
    if: needs.changes.outputs.should_run == 'false'
    name: Test Node.js ${{ matrix.node_version }} / Rust ${{ matrix.rust_version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: ["18", "20"]
        rust_version: [stable] # We most likely don't care about Rust versions here, we'll catch those issues in test_rust.yml.
        os: [ubuntu-22.04, windows-latest]

    steps:
      - name: No-op
        run: echo noop
