// Much of this was copied from the (gigantic) bindings auto-generated by `bindgen`.

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[repr(C)]
pub struct AVCodec {
    private: [u8; 0],
}
#[repr(C)]
pub struct AVFrame {
    private: [u8; 0],
}
#[repr(C)]
pub struct AVPacket {
    private: [u8; 0],
}
#[repr(C)]
pub struct AVCodecContext {
    private: [u8; 0],
}
#[repr(C)]
pub struct AVDictionary {
    private: [u8; 0],
}

pub const AV_INPUT_BUFFER_PADDING_SIZE: u64 = 8;

extern "C" {
    pub fn avcodec_alloc_context3(codec: *const AVCodec) -> *mut AVCodecContext;
    pub fn avcodec_free_context(avctx: *mut *mut AVCodecContext);

    pub fn avcodec_open2(
        avctx: *mut AVCodecContext,
        codec: *const AVCodec,
        options: *mut *mut AVDictionary,
    ) -> ::std::os::raw::c_int;

    pub fn av_malloc(size: usize) -> *mut ::std::os::raw::c_void;

    pub fn av_packet_alloc() -> *mut AVPacket;
    pub fn av_packet_from_data(
        pkt: *mut AVPacket,
        data: *mut u8,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn av_packet_free(pkt: *mut *mut AVPacket);

    pub fn av_frame_alloc() -> *mut AVFrame;
    pub fn av_frame_free(frame: *mut *mut AVFrame);

    pub fn avcodec_send_packet(
        avctx: *mut AVCodecContext,
        avpkt: *const AVPacket,
    ) -> ::std::os::raw::c_int;
    pub fn avcodec_receive_frame(
        avctx: *mut AVCodecContext,
        frame: *mut AVFrame,
    ) -> ::std::os::raw::c_int;

}

// These are our own helpers
extern "C" {
    pub static mut ff_vp6f_decoder_ptr: *mut AVCodec;


    pub fn frame_width(arg1: *mut AVFrame) -> ::std::os::raw::c_int;
    pub fn frame_height(arg1: *mut AVFrame) -> ::std::os::raw::c_int;
    pub fn frame_data(
        arg1: *mut AVFrame,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
    pub fn frame_linesize(arg1: *mut AVFrame, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
