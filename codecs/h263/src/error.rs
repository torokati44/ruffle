//! Errors that can be generated by H.263 operations

use std::io::{Error as IoError, ErrorKind as IoErrorKind};
use thiserror::Error;

#[derive(Debug, Error)]
pub enum Error {
    #[error("the H.263 decoder failed internally, this is a bug")]
    InternalDecoderError,

    #[error("the H.263 bitstream could not be decoded")]
    InvalidBitstream,

    #[error("the decoded H.263 bitstream is missing it's picture format")]
    PictureFormatMissing,

    #[error("the decoded H.263 bitstream has an invalid picture format")]
    PictureFormatInvalid,

    #[error("the decoded H.263 bitstream has uncoded iframe blocks")]
    UncodedIFrameBlocks,

    #[error("an I/O error occured: {0}")]
    UnhandledIoError(IoError),

    #[error("a feature in the H.263 bitstream being decoded is not yet supported")]
    UnimplementedDecoding,
}

impl From<IoError> for Error {
    fn from(ioe: IoError) -> Self {
        Error::UnhandledIoError(ioe)
    }
}

impl Error {
    fn is_eof_error(&self) -> bool {
        if let Self::UnhandledIoError(ioe) = self {
            matches!(ioe.kind(), IoErrorKind::UnexpectedEof)
        } else {
            false
        }
    }
}

pub type Result<T> = std::result::Result<T, Error>;
